options {
	STATIC=false;
	//IGNORE_CASE=true;
	//FORCE_LA_CHECK=true;
}

PARSER_BEGIN(MathParser)
	package MathParser;

	public class MathParser {
		private java.util.HashMap userVars=new java.util.HashMap();
		public MathParser() {
			this(new java.io.StringReader(""));
			resetVariables();
		}
		public void resetVariables() {
			userVars.clear();
			setVariable("Pi",Math.PI);
			setVariable("E",Math.E);
		}
		public void setVariable(String varName,double varValue) {
			//userVars.put(varName.toUpperCase(),new Double(varValue));
			userVars.put(varName,new Double(varValue));
		}
		public double getVariable(String varName) {
			//varName=varName.toUpperCase();
			if (userVars.containsKey(varName))
				return ((Double)userVars.get(varName)).doubleValue();
			else return 0;
		}
		public double parseExpression(String s) throws ParseException {
//			try {
				ReInit(new java.io.StringReader(s+";"));
				return Go();
//			} catch (Exception e) {
//				return Double.NaN;
//			}
		}
//		public static void main(String[] args) throws ParseException, TokenMgrError {
//			MathParser testParser=new MathParser(System.in);
//			testParser.ReInit(new java.io.StringReader("y=.3 *-.1\r\ny;"));
//			System.out.println(testParser.Go());
//		}
	}
PARSER_END(MathParser)

SKIP : {" " | "\t"}
TOKEN : { <END_STATEMENT : <EOL> | <SEMICOLON> | <LINE_COMMENT> (~["\n","\r"])* <EOL> >}
TOKEN : { <#EOL : "\r" | "\n" | "\r\n">}
TOKEN : { <#SEMICOLON : ";"> }
TOKEN : { <#LINE_COMMENT : "//"> }

TOKEN : { <EQUALS: "=="> }
TOKEN : { <NOTEQUALS: "!="> }
TOKEN : { <GREATER: ">"> }
TOKEN : { <GREATEREQ: ">="> }
TOKEN : { <LESSER: "<"> }
TOKEN : { <LESSEREQ: "<="> }

TOKEN : { <PLUS : "+"> }
TOKEN : { <MINUS : "-"> }
TOKEN : { <MULTIPLY : "*"> }
TOKEN : { <DIVIDE : "/" > }
TOKEN : { <MODULO : "%" > }
TOKEN : { <POWER : "^"> }
TOKEN : { <BRACE_OPEN : "("> }
TOKEN : { <BRACE_CLOSE : ")"> }
TOKEN : { <EQUALTO : "="> }

TOKEN : { <ATAN2 : "atan2" > }
TOKEN : { <SIN : "sin" > }
TOKEN : { <COS : "cos" > }
TOKEN : { <TAN : "tan" > }
TOKEN : { <COSEC : "cosec" > }
TOKEN : { <SEC : "sec" > }
TOKEN : { <COT : "cot" > }
TOKEN : { <ARCSIN : "arcsin" > }
TOKEN : { <ARCCOS : "arccos" > }
TOKEN : { <ARCTAN : "arctan" > }
TOKEN : { <ARCCOSEC : "arccosec" > }
TOKEN : { <ARCSEC : "arcsec" > }
TOKEN : { <ARCCOT : "arccot" > }
TOKEN : { <SINH : "sinh" > }
TOKEN : { <COSH : "cosh" > }
TOKEN : { <TANH : "tanh" > }
TOKEN : { <COSECH : "cosech" > }
TOKEN : { <SECH : "sech" > }
TOKEN : { <COTH : "coth" > }
TOKEN : { <ARCSINH : "arcsinh" > }
TOKEN : { <ARCCOSH : "arccosh" > }
TOKEN : { <ARCTANH : "arctanh" > }
TOKEN : { <ARCCOSECH : "arccosech" > }
TOKEN : { <ARCSECH : "arcsech" > }
TOKEN : { <ARCCOTH : "arccoth" > }
TOKEN : { <SQRT : "sqrt" > }
TOKEN : { <EXP : "exp" > }
TOKEN : { <LN : "ln" > }
TOKEN : { <LOG10 : "log10" > }
TOKEN : { <LOG2 : "log2" > }
TOKEN : { <ABS : "abs" > }
TOKEN : { <FLOOR : "floor" | "box" > }
TOKEN : { <SIGN : "sign" > }
TOKEN : { <CEIL : "ceil" > }
TOKEN : { <FRAC : "frac" > }

TOKEN : { <NUMBER : (["0"-"9"])+ | (["0"-"9"])* "." (["0"-"9"])+> }
TOKEN : { <VARNAME : <NONNUMERIC>(["0"-"9"]|<NONNUMERIC>)* > }
TOKEN : { <#NONNUMERIC : ["a"-"z","A"-"Z","_"]> }

double GetNextTerm() throws NumberFormatException : 
{
	Token t;
	double d,d2;
	String fn=null;
}
{
	<MINUS> d=ParseLevel3()
	{return -d;}
|
	t=<NUMBER>
	{return Double.parseDouble(t.image);}
|
	t=<VARNAME>
	{return getVariable(t.image);}
|
	<BRACE_OPEN> d=Expression() <BRACE_CLOSE>
	{return d;}
| <ATAN2> <BRACE_OPEN> d=Expression() "," d2=Expression() <BRACE_CLOSE> {return Math.atan2(d,d2);}
| <SIN> <BRACE_OPEN> d=Expression() <BRACE_CLOSE> {return Math.sin(d);}
| <COS> <BRACE_OPEN> d=Expression() <BRACE_CLOSE> {return Math.cos(d);}
| <TAN> <BRACE_OPEN> d=Expression() <BRACE_CLOSE> {return Math.tan(d);}
| <COSEC> <BRACE_OPEN> d=Expression() <BRACE_CLOSE> {return 1/Math.sin(d);}
| <SEC> <BRACE_OPEN> d=Expression() <BRACE_CLOSE> {return 1/Math.cos(d);}
| <COT> <BRACE_OPEN> d=Expression() <BRACE_CLOSE> {return 1/Math.tan(d);}
| <ARCSIN> <BRACE_OPEN> d=Expression() <BRACE_CLOSE> {return Math.asin(d);}
| <ARCCOS> <BRACE_OPEN> d=Expression() <BRACE_CLOSE> {return Math.acos(d);}
| <ARCTAN> <BRACE_OPEN> d=Expression() <BRACE_CLOSE> {return Math.atan(d);}
| <ARCCOSEC> <BRACE_OPEN> d=Expression() <BRACE_CLOSE> {return Math.asin(1/d);}
| <ARCSEC> <BRACE_OPEN> d=Expression() <BRACE_CLOSE> {return Math.acos(1/d);}
| <ARCCOT> <BRACE_OPEN> d=Expression() <BRACE_CLOSE> {return Math.atan(1/d);}
| <SINH> <BRACE_OPEN> d=Expression() <BRACE_CLOSE> {return (Math.exp(d)-Math.exp(-d))/2;}
| <COSH> <BRACE_OPEN> d=Expression() <BRACE_CLOSE> {return (Math.exp(d)+Math.exp(-d))/2;}
| <TANH> <BRACE_OPEN> d=Expression() <BRACE_CLOSE> {return (Math.exp(d)-Math.exp(-d))/(Math.exp(d)+Math.exp(-d));}
| <COSECH> <BRACE_OPEN> d=Expression() <BRACE_CLOSE> {return 2/(Math.exp(d)-Math.exp(-d));}
| <SECH> <BRACE_OPEN> d=Expression() <BRACE_CLOSE> {return 2/(Math.exp(d)+Math.exp(-d));}
| <COTH> <BRACE_OPEN> d=Expression() <BRACE_CLOSE> {return (Math.exp(d)+Math.exp(-d))/(Math.exp(d)-Math.exp(-d));}
| <ARCSINH> <BRACE_OPEN> d=Expression() <BRACE_CLOSE> {return Math.log(d+Math.sqrt(d*d+1));}
| <ARCCOSH> <BRACE_OPEN> d=Expression() <BRACE_CLOSE> {return Math.log(d+Math.sqrt(d*d-1));}
| <ARCTANH> <BRACE_OPEN> d=Expression() <BRACE_CLOSE> {return Math.log((1+d)/(1-d))/2;}
| <ARCCOSECH> <BRACE_OPEN> d=Expression() <BRACE_CLOSE> {return Math.log(Math.sqrt(1/d/d-1)+1/d);}
| <ARCSECH> <BRACE_OPEN> d=Expression() <BRACE_CLOSE> {return Math.log(Math.sqrt(1/d/d-1)+1/d);}
| <ARCCOTH> <BRACE_OPEN> d=Expression() <BRACE_CLOSE> {return Math.log((d+1)/(d-1))/2;}
| <SQRT> <BRACE_OPEN> d=Expression() <BRACE_CLOSE> {return Math.sqrt(d);}
| <EXP> <BRACE_OPEN> d=Expression() <BRACE_CLOSE> {return Math.exp(d);}
| <LN> <BRACE_OPEN> d=Expression() <BRACE_CLOSE> {return Math.log(d);}
| <LOG10> <BRACE_OPEN> d=Expression() <BRACE_CLOSE> {return Math.log(d)/Math.log(10);}
| <LOG2> <BRACE_OPEN> d=Expression() <BRACE_CLOSE> {return Math.tan(d)/Math.log(2);}
| <ABS>  <BRACE_OPEN> d=Expression() <BRACE_CLOSE> {return Math.abs(d);}
| <FLOOR> <BRACE_OPEN> d=Expression() <BRACE_CLOSE> {return Math.floor(d);}
| <SIGN> <BRACE_OPEN> d=Expression() <BRACE_CLOSE> {if (d>0) return 1; else if (d<0) return -1; else return 0;}
| <CEIL> <BRACE_OPEN> d=Expression() <BRACE_CLOSE> {return Math.ceil(d);}
| <FRAC> <BRACE_OPEN> d=Expression() <BRACE_CLOSE> {return d-Math.floor(d);}
}

double Go() :
{
	Token t;
	double x=0;
}
{
	(<END_STATEMENT>)*
	(
		LOOKAHEAD(2)
		x=Expression()
		(<END_STATEMENT>)+
	|
		t=<VARNAME>
		<EQUALTO>
		x=Expression()
		{ setVariable(t.image,x); }
		(<END_STATEMENT>)+
	)*
	{return x;}
}

double Expression() throws NumberFormatException : 
{
	double value,x;
}
{
	value=ParseLevel1()
	(
		<EQUALS>
		x=ParseLevel1()
		{value=(value==x)?1:0;}
	|
		<NOTEQUALS>
		x=ParseLevel1()
		{value=(value!=x)?1:0;}
	|
		<LESSER>
		x=ParseLevel1()
		{value=(value<x)?1:0;}
	|
		<LESSEREQ>
		x=ParseLevel1()
		{value=(value<=x)?1:0;}
	|
		<GREATER>
		x=ParseLevel1()
		{value=(value>x)?1:0;}
	|
		<GREATEREQ>
		x=ParseLevel1()
		{value=(value>=x)?1:0;}
	)*
	{return value;}
}

double ParseLevel1() throws NumberFormatException : 
{
	double value,x;
}
{
	value=ParseLevel2()
	(
		<PLUS>
		x=ParseLevel2()
		{value+=x;}
	|
		<MINUS>
		x=ParseLevel2()
		{value-=x;}
	)*
	{return value;}
}

double ParseLevel2() throws NumberFormatException : 
{
	double value,x;
}
{
	value=ParseLevel3()
	(
		(
			<MULTIPLY> x=ParseLevel3()
		| 
			LOOKAHEAD ({getToken(1).kind!=MINUS})
			x=ParseLevel3() 
		)
		{value*=x;}
	|
		<DIVIDE>
		x=ParseLevel3()
		{value/=x;}
	|
		<MODULO>
		x=ParseLevel3()
		{value%=x;}
	)*
	{return value;}
}

double ParseLevel3() throws NumberFormatException : 
{
	double value,x;
}
{
	value=GetNextTerm()
	(
		LOOKAHEAD(2)
		<POWER>
		x=ParseLevel3()
		{value=Math.pow(value,x);}
	)*
	{return value;}
}